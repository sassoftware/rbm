#
# Copyright (c) rPath, Inc.
#

class UpdateServiceAppliance(PackageRecipe):
    name = 'updateservice'
    version = '7'

    buildRequires = [
        'conary-repository',
        'python-kid',
        'make',
        'mod_python:python',
        'python-devel',
        #'rapa',
      ]

    Flags.ec2 = False

    def setup(r):
        r.macros.disc1 = '/usr/lib/media-template/disc1'
        r.macros.product = 'rPath Appliance Platform Update Service'
        if not r.macros.get('shortVersion'):
            r.macros.shortVersion = r.version

        r.addMercurialSnapshot()

        args = 'VERSION=%(shortVersion)s'
        if Flags.ec2:
            args += ' EC2=1'
        r.Make(args)
        r.MakeInstall(args)

        # Repository log and config files
        r.Transient('/srv/conary/repository.cnr')
        r.Create('/srv/conary/logs/repository.log')
        r.InitialContents('/srv/conary/logs/repository.log')
        r.Create('/srv/conary/config/99_custom.cnr')
        r.InitialContents('/srv/conary/config/99_custom.cnr')

        # Directories
        r.MakeDirs('/srv/conary/tmp',
                   '/srv/conary/contents',
                   '/srv/conary/cscache')
        r.ExcludeDirectories(exceptions='/srv/conary')
        r.ExcludeDirectories(exceptions='/srv/conary/contents')
        r.ExcludeDirectories(exceptions='/srv/conary/tmp')
        r.ExcludeDirectories(exceptions='/srv/conary/logs')
        r.ExcludeDirectories(exceptions='/srv/conary/cscache')
        r.Ownership('apache', 'apache', '/srv/conary',
                    '/srv/conary/.*', '/srv/conary/logs/.*')

        r.CompilePython('%(libdir)s/raa')
        r.CompilePython('%(libdir)s/python%(pyver)s/site-packages')

        # De-flavor pure python files
        r.Flavor(exceptions='%(libdir)s/(raa|python%(pyver)s)/')
        r.Flavor(exceptions='(/srv/conary|/usr)/bin/')
        r.Flavor(exceptions='/etc/raa/backup.d/')

        # Postgres initscript (a symlink)
        r.DanglingSymlinks(exceptions='%(initdir)s/postgresql-updateservice')

        # Other requirements
        r.Requires('mod_ssl:rpm', '%(sysconfdir)s/httpd/conf.d/conary.conf')
        r.Requires('mod_python:python', '%(sysconfdir)s/httpd/conf.d/conary.conf')
        r.Requires('mod_python:runtime', '%(sysconfdir)s/httpd/conf.d/conary.conf')
        r.Requires('conary-repository:python', '%(sysconfdir)s/httpd/conf.d/conary.conf')
        r.Requires('/usr/sbin/tmpwatch', '%(sysconfdir)s/cron.daily/mirror')
        r.Requires('/usr/sbin/logrotate', '%(sysconfdir)s/cron.daily/mirror')

        # Appliance-specific components
        r.PackageSpec('%(name)s-appliance',
                # rAPA
                '%(libdir)s/raa/',
                '/etc/raa/',
                # rc generator
                '%(sysconfdir)s/httpd/conf.d/updateservice.conf',
                '%(libdir)s/python%(pyver)s/site-packages/rbm_rc\..*',
                # PostgreSQL configuration
                '/etc/cron.d/postgres',
                '/etc/postgresql.conf.updateservice',
                '/etc/init.d/postgresql-updateservice',
                '/etc/sysconfig/pgsql/postgresql-updateservice',
                # rmake
                '/etc/rmake3/',
                '/boot/',
                # branding
                '/usr/share/splashy/',
                '/etc/bootloader.d/',
                )

        r.PackageSpec('anaconda-custom-updateservice', '/usr/share/anaconda/')
